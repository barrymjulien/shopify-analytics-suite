// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "sqlite"
  url      = "file:dev.sqlite"
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
  
  @@index([shop])
  @@index([expires])
}

model AnalyticsCache {
  id            String   @id @default(cuid())
  shop          String
  metricType    String
  metricData    String   // SQLite doesn't support JSON, so we'll store as string
  calculatedAt  DateTime @default(now())
  expiresAt     DateTime
  
  @@index([shop, metricType])
  @@index([expiresAt])
  @@unique([shop, metricType])
}

model CustomerProfile {
  id            String   @id @default(cuid())
  shop          String
  customerId    String
  clvScore      Float?
  totalOrders   Int      @default(0)
  totalSpent    Float    @default(0)
  lastOrderDate DateTime?
  segment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([shop, customerId])
  @@index([shop, segment]) // For segment-based filtering
  @@index([shop, lastOrderDate]) // For recency queries
  @@index([shop, totalSpent]) // For monetary value queries
  @@unique([shop, customerId])
}

model RevenueMetric {
  id            String   @id @default(cuid())
  shop          String
  date          DateTime
  revenue       Float
  orderCount    Int
  avgOrderValue Float
  createdAt     DateTime @default(now())
  
  @@index([shop, date])
  @@index([date]) // For date-only queries
  @@index([shop, revenue]) // For revenue range queries
  @@unique([shop, date])
}

model OnboardingState {
  id          String    @id @default(cuid())
  shop        String    @unique
  completed   Boolean   @default(false)
  currentStep String    @default("welcome")
  stepsData   String?   // JSON data for completed steps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([shop])
  @@index([completed]) // To find all users who have/haven't completed onboarding
}
